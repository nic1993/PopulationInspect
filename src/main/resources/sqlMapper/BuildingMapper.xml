<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.hdu.lab.checkIn.mapper.BuildingMapper">
	<resultMap id="BaseResultMap" type="edu.hdu.lab.checkIn.model.Building">
		<id column="BUIL_ID" property="builId" jdbcType="INTEGER" />
		<result column="COMM_ID" property="commId" jdbcType="INTEGER" />
		<result column="POLI_ID" property="poliId" jdbcType="INTEGER" />
		<result column="BUIL_NAME" property="builName" jdbcType="VARCHAR" />
		<result column="BUIL_GPSE" property="builGpse" jdbcType="REAL" />
		<result column="BUIL_GPSN" property="builGpsn" jdbcType="REAL" />
		<result column="BUIL_TYPE" property="builType" jdbcType="CHAR" />
		<result column="IS_DELETED" property="isDeleted" jdbcType="BIT" />
		<result column="RAMARK" property="ramark" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		BUIL_ID, COMM_ID, POLI_ID, BUIL_NAME, BUIL_GPSE, BUIL_GPSN,
		BUIL_TYPE,
		IS_DELETED,
		RAMARK
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="edu.hdu.lab.checkIn.model.BuildingExample">
		select
		<if test="distinct">
			distinct
		</if>
		'true' as QUERYID,
		<include refid="Base_Column_List" />
		from building
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from building
		where BUIL_ID = #{builId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		building
		where BUIL_ID = #{builId,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="edu.hdu.lab.checkIn.model.BuildingExample">
		delete from building
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="edu.hdu.lab.checkIn.model.Building">
		insert into building (BUIL_ID,
		COMM_ID, POLI_ID,
		BUIL_NAME, BUIL_GPSE, BUIL_GPSN,
		BUIL_TYPE,
		IS_DELETED, RAMARK
		)
		values (#{builId,jdbcType=INTEGER},
		#{commId,jdbcType=INTEGER},
		#{poliId,jdbcType=INTEGER},
		#{builName,jdbcType=VARCHAR}, #{builGpse,jdbcType=REAL},
		#{builGpsn,jdbcType=REAL},
		#{builType,jdbcType=CHAR},
		#{isDeleted,jdbcType=BIT},
		#{ramark,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="edu.hdu.lab.checkIn.model.Building">
		insert into building
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="builId != null">
				BUIL_ID,
			</if>
			<if test="commId != null">
				COMM_ID,
			</if>
			<if test="poliId != null">
				POLI_ID,
			</if>
			<if test="builName != null">
				BUIL_NAME,
			</if>
			<if test="builGpse != null">
				BUIL_GPSE,
			</if>
			<if test="builGpsn != null">
				BUIL_GPSN,
			</if>
			<if test="builType != null">
				BUIL_TYPE,
			</if>
			<if test="isDeleted != null">
				IS_DELETED,
			</if>
			<if test="ramark != null">
				RAMARK,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="builId != null">
				#{builId,jdbcType=INTEGER},
			</if>
			<if test="commId != null">
				#{commId,jdbcType=INTEGER},
			</if>
			<if test="poliId != null">
				#{poliId,jdbcType=INTEGER},
			</if>
			<if test="builName != null">
				#{builName,jdbcType=VARCHAR},
			</if>
			<if test="builGpse != null">
				#{builGpse,jdbcType=REAL},
			</if>
			<if test="builGpsn != null">
				#{builGpsn,jdbcType=REAL},
			</if>
			<if test="builType != null">
				#{builType,jdbcType=CHAR},
			</if>
			<if test="isDeleted != null">
				#{isDeleted,jdbcType=BIT},
			</if>
			<if test="ramark != null">
				#{ramark,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="edu.hdu.lab.checkIn.model.BuildingExample"
		resultType="java.lang.Integer">
		select count(*) from building
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update building
		<set>
			<if test="record.builId != null">
				BUIL_ID = #{record.builId,jdbcType=INTEGER},
			</if>
			<if test="record.commId != null">
				COMM_ID = #{record.commId,jdbcType=INTEGER},
			</if>
			<if test="record.poliId != null">
				POLI_ID = #{record.poliId,jdbcType=INTEGER},
			</if>
			<if test="record.builName != null">
				BUIL_NAME = #{record.builName,jdbcType=VARCHAR},
			</if>
			<if test="record.builGpse != null">
				BUIL_GPSE = #{record.builGpse,jdbcType=REAL},
			</if>
			<if test="record.builGpsn != null">
				BUIL_GPSN = #{record.builGpsn,jdbcType=REAL},
			</if>
			<if test="record.builType != null">
				BUIL_TYPE = #{record.builType,jdbcType=CHAR},
			</if>
			<if test="record.isDeleted != null">
				IS_DELETED = #{record.isDeleted,jdbcType=BIT},
			</if>
			<if test="record.ramark != null">
				RAMARK = #{record.ramark,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update building
		set BUIL_ID = #{record.builId,jdbcType=INTEGER},
		COMM_ID = #{record.commId,jdbcType=INTEGER},
		POLI_ID =
		#{record.poliId,jdbcType=INTEGER},
		BUIL_NAME =
		#{record.builName,jdbcType=VARCHAR},
		BUIL_GPSE =
		#{record.builGpse,jdbcType=REAL},
		BUIL_GPSN =
		#{record.builGpsn,jdbcType=REAL},
		BUIL_TYPE =
		#{record.builType,jdbcType=CHAR},
		IS_DELETED =
		#{record.isDeleted,jdbcType=BIT},
		RAMARK =
		#{record.ramark,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="edu.hdu.lab.checkIn.model.Building">
		update building
		<set>
			<if test="commId != null">
				COMM_ID = #{commId,jdbcType=INTEGER},
			</if>
			<if test="poliId != null">
				POLI_ID = #{poliId,jdbcType=INTEGER},
			</if>
			<if test="builName != null">
				BUIL_NAME = #{builName,jdbcType=VARCHAR},
			</if>
			<if test="builGpse != null">
				BUIL_GPSE = #{builGpse,jdbcType=REAL},
			</if>
			<if test="builGpsn != null">
				BUIL_GPSN = #{builGpsn,jdbcType=REAL},
			</if>
			<if test="builType != null">
				BUIL_TYPE = #{builType,jdbcType=CHAR},
			</if>
			<if test="isDeleted != null">
				IS_DELETED = #{isDeleted,jdbcType=BIT},
			</if>
			<if test="ramark != null">
				RAMARK = #{ramark,jdbcType=VARCHAR},
			</if>
		</set>
		where BUIL_ID = #{builId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="edu.hdu.lab.checkIn.model.Building">
		update building
		set COMM_ID = #{commId,jdbcType=INTEGER},
		POLI_ID =
		#{poliId,jdbcType=INTEGER},
		BUIL_NAME = #{builName,jdbcType=VARCHAR},
		BUIL_GPSE = #{builGpse,jdbcType=REAL},
		BUIL_GPSN =
		#{builGpsn,jdbcType=REAL},
		BUIL_TYPE = #{builType,jdbcType=CHAR},
		IS_DELETED = #{isDeleted,jdbcType=BIT},
		RAMARK =
		#{ramark,jdbcType=VARCHAR}
		where BUIL_ID = #{builId,jdbcType=INTEGER}
	</update>

	<select id="getBuildbyRoomClass" parameterType="map" resultMap="BaseResultMap">
		select distinct b.*
		from
		room as r ,building as b,community as c
		where
		((c.POLI_ID=#{poli_id,jdbcType=INTEGER}
		and
		c.COMM_ID=b.COMM_ID)
		or
		b.POLI_ID=#{poli_id,jdbcType=INTEGER})
		and
		r.ROOM_CLASS=#{roomClass,jdbcType=VARCHAR}
		and
		r.BUIL_ID=b.BUIL_ID
		<if test="comm_id!=null">
			and
			b.COMM_ID=#{comm_id,jdbcType=INTEGER}
		</if>
	</select>

	<select id="getBuildbyRoomSubClass" resultMap="BaseResultMap">
		select distinct b.*
		from
		room as r ,building as b,community as c
		where
		((c.POLI_ID=#{poli_id,jdbcType=INTEGER}
		and
		c.COMM_ID=b.COMM_ID)
		or
		b.POLI_ID=#{poli_id,jdbcType=INTEGER})
		and
		r.ROOM_SUBCLASS=#{roomSubclass,jdbcType=VARCHAR}
		and
		r.BUIL_ID=b.BUIL_ID;
		<if test="comm_id!=null">
			and
			b.COMM_ID=#{comm_id,jdbcType=INTEGER}
		</if>
	</select>

	<!-- 根据POLI_ID获取未巡检建筑 -->
	<select id="getOverBuilbyPoliid" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select distinct b.* 
		from room as r left join building as b
		 on r.BUIL_ID=b.BUIL_ID left join community as
		c on c.COMM_ID=b.COMM_ID left join person as p on p.ROOM_ID=r.ROOM_ID left join sysparam
		as s on s.PARA_ID=p.IS_FOCUS left join roomsysparam as rs on rs.PARA_ID=r.IS_FOCUS
		where
		(c.POLI_ID=#{poliId,jdbcType=INTEGER} or
		b.POLI_ID=#{poliId,jdbcType=INTEGER}) and
		r.BUIL_ID=b.BUIL_ID 
		and c.COMM_ID=b.COMM_ID and
		((to_days(now())-to_days(r.TIME_LASTINSPECT))>s.PARA_VALUE or
		(to_days(now())-to_days(r.TIME_LASTINSPECT))>rs.PARA_VALUE)
	</select>

	<select id="getQuickOverBuilbyPoliid" parameterType="Integer"
		resultMap="BaseResultMap">
		select distinct b.* 
		from room as r left join building as b
		 on r.BUIL_ID=b.BUIL_ID left join community as
		c on c.COMM_ID=b.COMM_ID left join person as p on p.ROOM_ID=r.ROOM_ID left join sysparam
		as s on s.PARA_ID=p.IS_FOCUS left join roomsysparam as rs on rs.PARA_ID=r.IS_FOCUS
		where
		(c.POLI_ID=#{poliId,jdbcType=INTEGER} or
		b.POLI_ID=#{poliId,jdbcType=INTEGER}) and
		r.BUIL_ID=b.BUIL_ID 
		and c.COMM_ID=b.COMM_ID and
		(((to_days(now())-to_days(r.TIME_LASTINSPECT))&lt;=s.PARA_VALUE 
		and (to_days(now())-to_days(r.TIME_LASTINSPECT))>(s.PARA_VALUE-2))
		or
		((to_days(now())-to_days(r.TIME_LASTINSPECT))&lt;=rs.PARA_VALUE
		and (to_days(now())-to_days(r.TIME_LASTINSPECT))>(rs.PARA_VALUE-2)))
	</select>
	<select id="countBycommID" parameterType="Integer"
	    resultType="Integer">
	    select count(*) from building where comm_id=#{comm_id,jdbcType=INTEGER}
	</select>

</mapper>